# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aubo_msgs/IOState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import aubo_msgs.msg

class IOState(genpy.Message):
  _md5sum = "9ec6dbb17bd90dfffb00b6e735866ab5"
  _type = "aubo_msgs/IOState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string stamp 
Digital[] digital_in_states
Digital[] digital_out_states
Analog[] analog_in_states
Analog[] analog_out_states
Digital[] tool_io_states
Analog[] tool_ai_states
Digital[] safety_in_states
Digital[] safety_out_states

================================================================================
MSG: aubo_msgs/Digital
uint8 pin
bool flag
bool state

================================================================================
MSG: aubo_msgs/Analog
uint8 pin
float32 state
"""
  __slots__ = ['stamp','digital_in_states','digital_out_states','analog_in_states','analog_out_states','tool_io_states','tool_ai_states','safety_in_states','safety_out_states']
  _slot_types = ['string','aubo_msgs/Digital[]','aubo_msgs/Digital[]','aubo_msgs/Analog[]','aubo_msgs/Analog[]','aubo_msgs/Digital[]','aubo_msgs/Analog[]','aubo_msgs/Digital[]','aubo_msgs/Digital[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,digital_in_states,digital_out_states,analog_in_states,analog_out_states,tool_io_states,tool_ai_states,safety_in_states,safety_out_states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IOState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = ''
      if self.digital_in_states is None:
        self.digital_in_states = []
      if self.digital_out_states is None:
        self.digital_out_states = []
      if self.analog_in_states is None:
        self.analog_in_states = []
      if self.analog_out_states is None:
        self.analog_out_states = []
      if self.tool_io_states is None:
        self.tool_io_states = []
      if self.tool_ai_states is None:
        self.tool_ai_states = []
      if self.safety_in_states is None:
        self.safety_in_states = []
      if self.safety_out_states is None:
        self.safety_out_states = []
    else:
      self.stamp = ''
      self.digital_in_states = []
      self.digital_out_states = []
      self.analog_in_states = []
      self.analog_out_states = []
      self.tool_io_states = []
      self.tool_ai_states = []
      self.safety_in_states = []
      self.safety_out_states = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.stamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.digital_in_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.digital_in_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.digital_out_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.digital_out_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.analog_in_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.analog_in_states:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.pin, _x.state))
      length = len(self.analog_out_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.analog_out_states:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.pin, _x.state))
      length = len(self.tool_io_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.tool_io_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.tool_ai_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.tool_ai_states:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.pin, _x.state))
      length = len(self.safety_in_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety_in_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.safety_out_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety_out_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.digital_in_states is None:
        self.digital_in_states = None
      if self.digital_out_states is None:
        self.digital_out_states = None
      if self.analog_in_states is None:
        self.analog_in_states = None
      if self.analog_out_states is None:
        self.analog_out_states = None
      if self.tool_io_states is None:
        self.tool_io_states = None
      if self.tool_ai_states is None:
        self.tool_ai_states = None
      if self.safety_in_states is None:
        self.safety_in_states = None
      if self.safety_out_states is None:
        self.safety_out_states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stamp = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.digital_in_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.digital_in_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.digital_out_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.digital_out_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.analog_in_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Analog()
        _x = val1
        start = end
        end += 5
        (_x.pin, _x.state,) = _get_struct_Bf().unpack(str[start:end])
        self.analog_in_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.analog_out_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Analog()
        _x = val1
        start = end
        end += 5
        (_x.pin, _x.state,) = _get_struct_Bf().unpack(str[start:end])
        self.analog_out_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tool_io_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.tool_io_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tool_ai_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Analog()
        _x = val1
        start = end
        end += 5
        (_x.pin, _x.state,) = _get_struct_Bf().unpack(str[start:end])
        self.tool_ai_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety_in_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.safety_in_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety_out_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.safety_out_states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.stamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.digital_in_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.digital_in_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.digital_out_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.digital_out_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.analog_in_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.analog_in_states:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.pin, _x.state))
      length = len(self.analog_out_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.analog_out_states:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.pin, _x.state))
      length = len(self.tool_io_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.tool_io_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.tool_ai_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.tool_ai_states:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.pin, _x.state))
      length = len(self.safety_in_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety_in_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
      length = len(self.safety_out_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety_out_states:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.pin, _x.flag, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.digital_in_states is None:
        self.digital_in_states = None
      if self.digital_out_states is None:
        self.digital_out_states = None
      if self.analog_in_states is None:
        self.analog_in_states = None
      if self.analog_out_states is None:
        self.analog_out_states = None
      if self.tool_io_states is None:
        self.tool_io_states = None
      if self.tool_ai_states is None:
        self.tool_ai_states = None
      if self.safety_in_states is None:
        self.safety_in_states = None
      if self.safety_out_states is None:
        self.safety_out_states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stamp = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.digital_in_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.digital_in_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.digital_out_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.digital_out_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.analog_in_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Analog()
        _x = val1
        start = end
        end += 5
        (_x.pin, _x.state,) = _get_struct_Bf().unpack(str[start:end])
        self.analog_in_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.analog_out_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Analog()
        _x = val1
        start = end
        end += 5
        (_x.pin, _x.state,) = _get_struct_Bf().unpack(str[start:end])
        self.analog_out_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tool_io_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.tool_io_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tool_ai_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Analog()
        _x = val1
        start = end
        end += 5
        (_x.pin, _x.state,) = _get_struct_Bf().unpack(str[start:end])
        self.tool_ai_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety_in_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.safety_in_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety_out_states = []
      for i in range(0, length):
        val1 = aubo_msgs.msg.Digital()
        _x = val1
        start = end
        end += 3
        (_x.pin, _x.flag, _x.state,) = _get_struct_3B().unpack(str[start:end])
        val1.flag = bool(val1.flag)
        val1.state = bool(val1.state)
        self.safety_out_states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
